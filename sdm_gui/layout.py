#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.0 on Thu Sep 16 18:23:56 2021
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from .canvas import MyGLCanvas
from .components import MyID
# end wxGlade


class MyMainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyMainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 850))
        self.SetTitle("sdm - main")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/app.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        # Menu Bar
        self.menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(MyID.MFOpen, "Open", "")
        self.Bind(wx.EVT_MENU, self.onMBFOpen, id=MyID.MFOpen)
        wxglade_tmp_menu.Append(MyID.MFSave, "Save", "")
        self.Bind(wx.EVT_MENU, self.onMBFSave, id=MyID.MFSave)
        wxglade_tmp_menu.Append(MyID.MFClose, "Close", "")
        self.Bind(wx.EVT_MENU, self.onMBFClose, id=MyID.MFClose)
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(MyID.MFVasp, "VASP", "")
        self.Bind(wx.EVT_MENU, self.onMBFExportVASP, id=MyID.MFVasp)
        wxglade_tmp_menu_sub.Append(MyID.MFCrystal, "CRYSTAL", "")
        self.Bind(wx.EVT_MENU, self.onMBFExportCRYSTAL, id=MyID.MFCrystal)
        wxglade_tmp_menu_sub.Append(MyID.MFDftb, "DFTB", "")
        self.Bind(wx.EVT_MENU, self.onMBFExportDFTB, id=MyID.MFDftb)
        wxglade_tmp_menu.Append(MyID.MFExport, "Export", wxglade_tmp_menu_sub, "")
        self.menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(MyID.MEUndo, "Undo", "")
        self.Bind(wx.EVT_MENU, self.onMBEUndo, id=MyID.MEUndo)
        wxglade_tmp_menu.Append(MyID.MERedo, "Redo", "")
        self.Bind(wx.EVT_MENU, self.onMBERedo, id=MyID.MERedo)
        wxglade_tmp_menu.Append(MyID.MEReload, "Reload", "")
        self.Bind(wx.EVT_MENU, self.onMBEReload, id=MyID.MEReload)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(MyID.MEModify, "Modify", "")
        self.Bind(wx.EVT_MENU, self.onMBEModify, id=MyID.MEModify)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(MyID.MEFNone, "None", "")
        self.Bind(wx.EVT_MENU, self.onMBEFindBondsN, id=MyID.MEFNone)
        wxglade_tmp_menu_sub.Append(MyID.MEFEmpiric, "Empiric", "")
        self.Bind(wx.EVT_MENU, self.onMBEFindBondsE, id=MyID.MEFEmpiric)
        wxglade_tmp_menu_sub.Append(MyID.MEFEmpiricpbc, "Empiric-PBC", "")
        self.Bind(wx.EVT_MENU, self.onMBEFindBondsEP, id=MyID.MEFEmpiricpbc)
        wxglade_tmp_menu_sub.Append(MyID.MEFIdatm, "IDATM", "")
        self.Bind(wx.EVT_MENU, self.onMBEFindBondsI, id=MyID.MEFIdatm)
        wxglade_tmp_menu.Append(MyID.MEFindbonds, "Find bonds", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(MyID.MECP1, "P1", "")
        self.Bind(wx.EVT_MENU, self.onMBEConvertP1, id=MyID.MECP1)
        wxglade_tmp_menu_sub.Append(MyID.MECPrim, "Primitive", "")
        self.Bind(wx.EVT_MENU, self.onMBEConvertPrim, id=MyID.MECPrim)
        wxglade_tmp_menu_sub.Append(MyID.MECAsym, "Asymmetic", "")
        self.Bind(wx.EVT_MENU, self.onMBEConvertAsymm, id=MyID.MECAsym)
        wxglade_tmp_menu.Append(MyID.MEConvert, "Convert", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(MyID.MEMCell, "Into cell", "")
        self.Bind(wx.EVT_MENU, self.onMBEMoveInCell, id=MyID.MEMCell)
        wxglade_tmp_menu_sub.Append(MyID.MEMCellmol, "Into cell by molecule", "")
        self.Bind(wx.EVT_MENU, self.onMBEMoveInCellM, id=MyID.MEMCellmol)
        wxglade_tmp_menu_sub.Append(MyID.MEMMol, "by molecule", "")
        self.Bind(wx.EVT_MENU, self.onMBEMoveInMole, id=MyID.MEMMol)
        wxglade_tmp_menu.Append(MyID.MEMoveatom, "Move atoms", wxglade_tmp_menu_sub, "")
        self.menubar.Append(wxglade_tmp_menu, "&Edit")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(MyID.MVReset, "Reset camera", "")
        self.Bind(wx.EVT_MENU, self.onMBVAlong, id=MyID.MVReset)
        wxglade_tmp_menu.Append(MyID.MVSync, "Sync camera", "", wx.ITEM_CHECK)
        self.Bind(wx.EVT_MENU, self.onMBVSync, id=MyID.MVSync)
        wxglade_tmp_menu.Append(MyID.MVCenter, "Set camera center", "")
        self.Bind(wx.EVT_MENU, self.onMBVSetCenter, id=MyID.MVCenter)
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(MyID.MVAA, "a", "")
        self.Bind(wx.EVT_MENU, self.onMBVAlong, id=MyID.MVAA)
        wxglade_tmp_menu_sub.Append(MyID.MVAB, "b", "")
        self.Bind(wx.EVT_MENU, self.onMBVAlong, id=MyID.MVAB)
        wxglade_tmp_menu_sub.Append(MyID.MVAC, "c", "")
        self.Bind(wx.EVT_MENU, self.onMBVAlong, id=MyID.MVAC)
        wxglade_tmp_menu_sub.Append(MyID.MVAAs, "a*", "")
        self.Bind(wx.EVT_MENU, self.onMBVAlong, id=MyID.MVAAs)
        wxglade_tmp_menu_sub.Append(MyID.MVABs, "b*", "")
        self.Bind(wx.EVT_MENU, self.onMBVAlong, id=MyID.MVABs)
        wxglade_tmp_menu_sub.Append(MyID.MVACs, "c*", "")
        self.Bind(wx.EVT_MENU, self.onMBVAlong, id=MyID.MVACs)
        wxglade_tmp_menu.Append(MyID.MVAlong, "Along", wxglade_tmp_menu_sub, "")
        self.menubar.Append(wxglade_tmp_menu, "&View")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(MyID.MAMolecompare, "Molecule compare", "")
        self.Bind(wx.EVT_MENU, self.onMBAMolCompare, id=MyID.MAMolecompare)
        self.menubar.Append(wxglade_tmp_menu, "&Analysis")
        self.SetMenuBar(self.menubar)
        # Menu Bar end

        self.statusbar = self.CreateStatusBar(3)
        self.statusbar.SetStatusWidths([-1, -1, -1])
        # statusbar fields
        statusbar_fields = ["stat1", "stat2", "stat3"]
        for i in range(len(statusbar_fields)):
            self.statusbar.SetStatusText(statusbar_fields[i], i)

        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1)
        self.toolbar.AddTool(MyID.TBCloudopen, "Cloud Open", wx.Bitmap("./resource/icon-cloudfile.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Cloud Open", "")
        self.Bind(wx.EVT_TOOL, self.onTBCloudopen, id=MyID.TBCloudopen)
        self.toolbar.AddTool(MyID.TBSelect, "Select", wx.Bitmap("./resource/icon-select.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Select", "")
        self.Bind(wx.EVT_TOOL, self.onTBSelect, id=MyID.TBSelect)
        self.toolbar.AddTool(MyID.TBConfig, "Properties", wx.Bitmap("./resource/icon-config.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Properties", "")
        self.Bind(wx.EVT_TOOL, self.onTBConfig, id=MyID.TBConfig)
        self.toolbar.AddTool(MyID.TBLattice, "Lattice", wx.Bitmap("./resource/icon-lattice.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Lattice", "")
        self.Bind(wx.EVT_TOOL, self.onTBLattice, id=MyID.TBLattice)
        self.toolbar.AddTool(MyID.TBSymmetry, "Symmetry", wx.Bitmap("./resource/icon-symmetry.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Symmetry", "")
        self.Bind(wx.EVT_TOOL, self.onTBSymmetry, id=MyID.TBSymmetry)
        self.toolbar.AddTool(MyID.TBPacking, "Packing", wx.Bitmap("./resource/icon-expand.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Packing", "")
        self.Bind(wx.EVT_TOOL, self.onTBPacking, id=MyID.TBPacking)
        self.SetToolBar(self.toolbar)
        self.toolbar.Realize()
        # Tool Bar end

        sizer = wx.BoxSizer(wx.VERTICAL)

        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY)
        self.window_1.SetMinimumPaneSize(185)
        self.window_1.SetSashGravity(1.0)
        sizer.Add(self.window_1, 1, wx.EXPAND, 0)

        self.window_1_pane_1 = wx.Panel(self.window_1, wx.ID_ANY)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        self.canvas = MyGLCanvas(self.window_1_pane_1, wx.ID_ANY)
        sizer_2.Add(self.canvas, 1, wx.EXPAND, 0)

        self.window_1_pane_2 = wx.Panel(self.window_1, wx.ID_ANY)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        self.notebook = wx.Notebook(self.window_1_pane_2, wx.ID_ANY, style=wx.NB_BOTTOM)
        sizer_3.Add(self.notebook, 1, wx.EXPAND, 0)

        self.nb_detail = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.nb_detail, "detail")

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        self.text_ctrl_detail = wx.TextCtrl(self.nb_detail, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.text_ctrl_detail.SetFont(wx.Font(10, wx.FONTFAMILY_TELETYPE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "DejaVu Sans Mono"))
        sizer_4.Add(self.text_ctrl_detail, 1, wx.EXPAND, 0)

        self.nb_console = wx.Panel(self.notebook, wx.ID_ANY)
        self.notebook.AddPage(self.nb_console, "console")

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        self.text_ctrl_output = wx.TextCtrl(self.nb_console, MyID.ConsoleText, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        sizer_5.Add(self.text_ctrl_output, 1, wx.EXPAND, 0)

        static_line_1 = wx.StaticLine(self.nb_console, wx.ID_ANY)
        sizer_5.Add(static_line_1, 0, wx.EXPAND, 0)

        self.text_ctrl_input = wx.TextCtrl(self.nb_console, MyID.ConsoleInput, "", style=wx.TE_PROCESS_ENTER | wx.TE_PROCESS_TAB)
        sizer_5.Add(self.text_ctrl_input, 0, wx.EXPAND, 0)

        self.nb_console.SetSizer(sizer_5)

        self.nb_detail.SetSizer(sizer_4)

        self.window_1_pane_2.SetSizer(sizer_3)

        self.window_1_pane_1.SetSizer(sizer_2)

        self.window_1.SplitHorizontally(self.window_1_pane_1, self.window_1_pane_2, 543)

        self.SetSizer(sizer)

        self.Layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.OnConsoleEnter, self.text_ctrl_output)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnConsoleEnter, self.text_ctrl_input)
        # end wxGlade

    def onMBFOpen(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBFOpen' not implemented!")
        event.Skip()

    def onMBFSave(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBFSave' not implemented!")
        event.Skip()

    def onMBFClose(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBFClose' not implemented!")
        event.Skip()

    def onMBFExportVASP(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBFExportVASP' not implemented!")
        event.Skip()

    def onMBFExportCRYSTAL(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBFExportCRYSTAL' not implemented!")
        event.Skip()

    def onMBFExportDFTB(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBFExportDFTB' not implemented!")
        event.Skip()

    def onMBEUndo(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEUndo' not implemented!")
        event.Skip()

    def onMBERedo(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBERedo' not implemented!")
        event.Skip()

    def onMBEReload(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEReload' not implemented!")
        event.Skip()

    def onMBEModify(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEModify' not implemented!")
        event.Skip()

    def onMBEFindBondsN(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEFindBondsN' not implemented!")
        event.Skip()

    def onMBEFindBondsE(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEFindBondsE' not implemented!")
        event.Skip()

    def onMBEFindBondsEP(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEFindBondsEP' not implemented!")
        event.Skip()

    def onMBEFindBondsI(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEFindBondsI' not implemented!")
        event.Skip()

    def onMBEConvertP1(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEConvertP1' not implemented!")
        event.Skip()

    def onMBEConvertPrim(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEConvertPrim' not implemented!")
        event.Skip()

    def onMBEConvertAsymm(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEConvertAsymm' not implemented!")
        event.Skip()

    def onMBEMoveInCell(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEMoveInCell' not implemented!")
        event.Skip()

    def onMBEMoveInCellM(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEMoveInCellM' not implemented!")
        event.Skip()

    def onMBEMoveInMole(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBEMoveInMole' not implemented!")
        event.Skip()

    def onMBVAlong(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBVAlong' not implemented!")
        event.Skip()

    def onMBVSync(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBVSync' not implemented!")
        event.Skip()

    def onMBVSetCenter(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBVSetCenter' not implemented!")
        event.Skip()

    def onMBAMolCompare(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onMBAMolCompare' not implemented!")
        event.Skip()

    def onTBCloudopen(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onTBCloudopen' not implemented!")
        event.Skip()

    def onTBSelect(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onTBSelect' not implemented!")
        event.Skip()

    def onTBConfig(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onTBConfig' not implemented!")
        event.Skip()

    def onTBLattice(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onTBLattice' not implemented!")
        event.Skip()

    def onTBSymmetry(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onTBSymmetry' not implemented!")
        event.Skip()

    def onTBPacking(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'onTBPacking' not implemented!")
        event.Skip()

    def OnConsoleEnter(self, event):  # wxGlade: MyMainFrame.<event_handler>
        print("Event handler 'OnConsoleEnter' not implemented!")
        event.Skip()

# end of class MyMainFrame

class MyLatticeDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyLatticeDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Lattice")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_2 = wx.FlexGridSizer(2, 6, 5, 5)
        sizer_1.Add(grid_sizer_2, 1, wx.ALL | wx.EXPAND, 5)

        label_1 = wx.StaticText(self, wx.ID_ANY, "a")
        grid_sizer_2.Add(label_1, 0, 0, 0)

        self.text_ctrl_1 = wx.TextCtrl(self, MyID.DlgLattTxt1, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_1, 0, 0, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "b")
        grid_sizer_2.Add(label_2, 0, 0, 0)

        self.text_ctrl_2 = wx.TextCtrl(self, MyID.DlgLattTxt2, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_2, 0, 0, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "c")
        grid_sizer_2.Add(label_3, 0, 0, 0)

        self.text_ctrl_3 = wx.TextCtrl(self, MyID.DlgLattTxt3, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_3, 0, 0, 0)

        label_4 = wx.StaticText(self, wx.ID_ANY, u"α")
        grid_sizer_2.Add(label_4, 0, 0, 0)

        self.text_ctrl_4 = wx.TextCtrl(self, MyID.DlgLattTxt4, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_4, 0, 0, 0)

        label_5 = wx.StaticText(self, wx.ID_ANY, u"β")
        grid_sizer_2.Add(label_5, 0, 0, 0)

        self.text_ctrl_5 = wx.TextCtrl(self, MyID.DlgLattTxt5, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_5, 0, 0, 0)

        label_6 = wx.StaticText(self, wx.ID_ANY, u"γ")
        grid_sizer_2.Add(label_6, 0, 0, 0)

        self.text_ctrl_6 = wx.TextCtrl(self, MyID.DlgLattTxt6, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_6, 0, 0, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 5)

        label_matrix = wx.StaticText(self, wx.ID_ANY, "matrix")
        sizer_3.Add(label_matrix, 1, 0, 0)

        self.text_ctrl_matrix = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.text_ctrl_matrix.SetMinSize((-1, 60))
        sizer_3.Add(self.text_ctrl_matrix, 0, wx.EXPAND, 0)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_4, 0, wx.ALL | wx.EXPAND, 5)

        self.checkbox_1 = wx.CheckBox(self, wx.ID_ANY, "fix frac")
        sizer_4.Add(self.checkbox_1, 0, 0, 0)

        self.checkbox_2 = wx.CheckBox(self, wx.ID_ANY, "translate")
        sizer_4.Add(self.checkbox_2, 0, 0, 0)

        self.checkbox_3 = wx.CheckBox(self, wx.ID_ANY, "rotate")
        sizer_4.Add(self.checkbox_3, 0, 0, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_5, 0, wx.ALL | wx.EXPAND, 5)

        self.button_OK = wx.Button(self, wx.ID_ANY, "OK")
        sizer_5.Add(self.button_OK, 0, 0, 0)

        self.button_Cancel = wx.Button(self, wx.ID_ANY, "Cancel")
        sizer_5.Add(self.button_Cancel, 0, 0, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_1)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_2)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_3)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_4)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_5)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_6)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_OK)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_Cancel)
        # end wxGlade

    def OnUpperTextEnter(self, event):  # wxGlade: MyLatticeDialog.<event_handler>
        print("Event handler 'OnUpperTextEnter' not implemented!")
        event.Skip()

    def OnOK(self, event):  # wxGlade: MyLatticeDialog.<event_handler>
        print("Event handler 'OnOK' not implemented!")
        event.Skip()

    def OnCancel(self, event):  # wxGlade: MyLatticeDialog.<event_handler>
        print("Event handler 'OnCancel' not implemented!")
        event.Skip()

# end of class MyLatticeDialog

class MySymmetryDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MySymmetryDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((395, 400))
        self.SetTitle("Symmetry")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_2 = wx.FlexGridSizer(2, 4, 5, 5)
        sizer_1.Add(grid_sizer_2, 0, wx.ALL | wx.EXPAND, 5)

        label_1 = wx.StaticText(self, wx.ID_ANY, "ITA")
        grid_sizer_2.Add(label_1, 0, 0, 0)

        self.text_ctrl_1 = wx.TextCtrl(self, MyID.DlgSymmTxt1, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_1, 1, wx.EXPAND, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "#")
        grid_sizer_2.Add(label_2, 0, 0, 0)

        self.text_ctrl_2 = wx.TextCtrl(self, MyID.DlgSymmTxt2, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_2, 0, 0, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "Hall")
        grid_sizer_2.Add(label_3, 0, 0, 0)

        self.text_ctrl_3 = wx.TextCtrl(self, MyID.DlgSymmTxt3, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_3, 1, wx.EXPAND, 0)

        label_4 = wx.StaticText(self, wx.ID_ANY, "#")
        grid_sizer_2.Add(label_4, 0, 0, 0)

        self.text_ctrl_4 = wx.TextCtrl(self, MyID.DlgSymmTxt4, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_4, 1, 0, 0)

        static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        sizer_1.Add(static_line_1, 0, wx.EXPAND, 0)

        self.text_ctrl_5 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        sizer_1.Add(self.text_ctrl_5, 1, wx.ALL | wx.EXPAND, 5)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 0, wx.EXPAND, 0)

        self.button_1 = wx.Button(self, wx.ID_ANY, "Set")
        sizer_3.Add(self.button_1, 1, wx.ALL, 5)

        self.button_2 = wx.Button(self, wx.ID_ANY, "Apply")
        sizer_3.Add(self.button_2, 1, wx.ALL, 5)

        self.button_3 = wx.Button(self, wx.ID_ANY, "Cancel")
        sizer_3.Add(self.button_3, 1, wx.ALL, 5)

        self.button_4 = wx.Button(self, wx.ID_ANY, "Refresh")
        sizer_3.Add(self.button_4, 1, wx.ALL, 5)

        grid_sizer_2.AddGrowableCol(1)

        self.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_1)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_2)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_3)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnUpperTextEnter, self.text_ctrl_4)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnApply, self.button_2)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.OnRefresh, self.button_4)
        # end wxGlade

    def OnUpperTextEnter(self, event):  # wxGlade: MySymmetryDialog.<event_handler>
        print("Event handler 'OnUpperTextEnter' not implemented!")
        event.Skip()

    def OnOK(self, event):  # wxGlade: MySymmetryDialog.<event_handler>
        print("Event handler 'OnOK' not implemented!")
        event.Skip()

    def OnApply(self, event):  # wxGlade: MySymmetryDialog.<event_handler>
        print("Event handler 'OnApply' not implemented!")
        event.Skip()

    def OnCancel(self, event):  # wxGlade: MySymmetryDialog.<event_handler>
        print("Event handler 'OnCancel' not implemented!")
        event.Skip()

    def OnRefresh(self, event):  # wxGlade: MySymmetryDialog.<event_handler>
        print("Event handler 'OnRefresh' not implemented!")
        event.Skip()

# end of class MySymmetryDialog

class MyFileConfigDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFileConfigDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Config")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_2 = wx.FlexGridSizer(2, 2, 10, 10)
        sizer_1.Add(grid_sizer_2, 1, wx.ALL | wx.EXPAND, 5)

        label_1 = wx.StaticText(self, wx.ID_ANY, "title")
        grid_sizer_2.Add(label_1, 0, wx.ALIGN_RIGHT, 0)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.text_ctrl_1.SetMinSize((200, 35))
        grid_sizer_2.Add(self.text_ctrl_1, 0, wx.ALL | wx.EXPAND, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "symprec")
        grid_sizer_2.Add(label_2, 0, wx.ALIGN_RIGHT, 0)

        self.text_ctrl_2 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        grid_sizer_2.Add(self.text_ctrl_2, 0, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 5)

        self.button_1 = wx.Button(self, wx.ID_ANY, "OK")
        sizer_3.Add(self.button_1, 1, wx.LEFT | wx.RIGHT, 5)

        self.button_2 = wx.Button(self, wx.ID_ANY, "Cancel")
        sizer_3.Add(self.button_2, 1, wx.LEFT | wx.RIGHT, 5)

        grid_sizer_2.AddGrowableCol(1)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.OnOK, self.text_ctrl_1)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnOK, self.text_ctrl_2)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_2)
        # end wxGlade

    def OnOK(self, event):  # wxGlade: MyFileConfigDialog.<event_handler>
        print("Event handler 'OnOK' not implemented!")
        event.Skip()

    def OnCancel(self, event):  # wxGlade: MyFileConfigDialog.<event_handler>
        print("Event handler 'OnCancel' not implemented!")
        event.Skip()

# end of class MyFileConfigDialog

class MyMolCompareDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyMolCompareDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Molecule Compare")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_2 = wx.FlexGridSizer(2, 2, 0, 0)
        sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Reference")
        grid_sizer_2.Add(label_1, 1, 0, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, "Comparsion")
        grid_sizer_2.Add(label_2, 1, 0, 0)

        self.check_list_box_1 = wx.CheckListBox(self, wx.ID_ANY, choices=[])
        grid_sizer_2.Add(self.check_list_box_1, 0, wx.EXPAND, 0)

        self.check_list_box_2 = wx.CheckListBox(self, wx.ID_ANY, choices=[])
        grid_sizer_2.Add(self.check_list_box_2, 0, wx.EXPAND, 0)

        grid_sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)

        self.checkbox_1 = wx.CheckBox(self, wx.ID_ANY, "ignore Hydrogen", style=wx.CHK_2STATE)
        self.checkbox_1.SetValue(1)
        grid_sizer_3.Add(self.checkbox_1, 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        grid_sizer_3.Add((0, 0), 0, 0, 0)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_4, 0, wx.EXPAND, 0)

        self.button_1 = wx.Button(self, wx.ID_ANY, "button_OK")
        sizer_4.Add(self.button_1, 1, 0, 0)

        self.button_2 = wx.Button(self, wx.ID_ANY, "button_Cancel")
        sizer_4.Add(self.button_2, 1, wx.EXPAND, 0)

        grid_sizer_2.AddGrowableRow(1)
        grid_sizer_2.AddGrowableCol(0)
        grid_sizer_2.AddGrowableCol(1)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.onBtnOK, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.onBtnCancel, self.button_2)
        # end wxGlade

    def onBtnOK(self, event):  # wxGlade: MyMolCompareDialog.<event_handler>
        print("Event handler 'onBtnOK' not implemented!")
        event.Skip()

    def onBtnCancel(self, event):  # wxGlade: MyMolCompareDialog.<event_handler>
        print("Event handler 'onBtnCancel' not implemented!")
        event.Skip()

# end of class MyMolCompareDialog

class MyBondDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyBondDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Bond")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 3)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Bond Type")
        sizer_3.Add(label_1, 0, 0, 0)

        self.combo_box_1 = wx.ComboBox(self, wx.ID_ANY, choices=["None", "Single", "Double", "Triple", "Aroma"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        sizer_3.Add(self.combo_box_1, 0, 0, 0)

        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED)
        sizer_1.Add(self.panel_1, 1, wx.ALL | wx.EXPAND, 5)

        grid_sizer_1 = wx.FlexGridSizer(3, 2, 3, 3)

        label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, "Translation Config")
        grid_sizer_1.Add(label_4, 1, wx.ALL, 3)

        grid_sizer_1.Add((0, 0), 0, 0, 0)

        label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "Atom 1", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_3, 1, wx.ALL, 5)

        self.combo_box_2 = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Translate Group", "Translate Atom", "Fixed"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_2.SetSelection(0)
        grid_sizer_1.Add(self.combo_box_2, 0, wx.ALL, 5)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Atom 2", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_2, 1, wx.ALL, 5)

        self.combo_box_3 = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Translate Group", "Translate Atom", "Fixed"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_3.SetSelection(0)
        grid_sizer_1.Add(self.combo_box_3, 0, wx.ALL, 5)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 3)

        self.slider_1 = wx.Slider(self, wx.ID_ANY, 1000, 0, 9980)
        sizer_4.Add(self.slider_1, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)

        label_5 = wx.StaticText(self, wx.ID_ANY, "0.01")
        sizer_5.Add(label_5, 1, wx.ALL, 3)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "1.0", style=wx.TE_PROCESS_ENTER)
        sizer_5.Add(self.text_ctrl_1, 0, 0, 0)

        label_6 = wx.StaticText(self, wx.ID_ANY, "5.0", style=wx.ALIGN_RIGHT)
        sizer_5.Add(label_6, 1, wx.ALL, 3)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.panel_1.SetSizer(grid_sizer_1)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_COMBOBOX, self.OnBondTypeSelect, self.combo_box_1)
        self.Bind(wx.EVT_COMBOBOX, self.OnConfigSelect, self.combo_box_2)
        self.Bind(wx.EVT_COMBOBOX, self.OnConfigSelect, self.combo_box_3)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.OnScroll, self.slider_1)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnSliderEnter, self.text_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_OK)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_CANCEL)
        # end wxGlade

    def OnBondTypeSelect(self, event):  # wxGlade: MyBondDialog.<event_handler>
        print("Event handler 'OnBondTypeSelect' not implemented!")
        event.Skip()

    def OnConfigSelect(self, event):  # wxGlade: MyBondDialog.<event_handler>
        print("Event handler 'OnConfigSelect' not implemented!")
        event.Skip()

    def OnScroll(self, event):  # wxGlade: MyBondDialog.<event_handler>
        print("Event handler 'OnScroll' not implemented!")
        event.Skip()

    def OnSliderEnter(self, event):  # wxGlade: MyBondDialog.<event_handler>
        print("Event handler 'OnSliderEnter' not implemented!")
        event.Skip()

    def OnOK(self, event):  # wxGlade: MyBondDialog.<event_handler>
        print("Event handler 'OnOK' not implemented!")
        event.Skip()

    def OnCancel(self, event):  # wxGlade: MyBondDialog.<event_handler>
        print("Event handler 'OnCancel' not implemented!")
        event.Skip()

# end of class MyBondDialog

class MyTwistDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyTwistDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Dihedral")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED)
        sizer_1.Add(self.panel_1, 1, wx.ALL | wx.EXPAND, 5)

        grid_sizer_1 = wx.FlexGridSizer(3, 2, 3, 3)

        label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, "Twist Config")
        grid_sizer_1.Add(label_4, 1, wx.ALL, 3)

        grid_sizer_1.Add((0, 0), 0, 0, 0)

        label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "Atom 1", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_3, 1, wx.ALL, 5)

        self.combo_box_2 = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Rotate Groups", "Rotate Group", "Rotate Atom", "Fixed"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_2.SetSelection(0)
        grid_sizer_1.Add(self.combo_box_2, 0, wx.ALL, 5)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Atom 4", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_2, 1, wx.ALL, 5)

        self.combo_box_3 = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Rotate Groups", "Rotate Group", "Rotate Atom", "Fixed"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_3.SetSelection(0)
        grid_sizer_1.Add(self.combo_box_3, 0, wx.ALL, 5)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 3)

        self.slider_1 = wx.Slider(self, wx.ID_ANY, 1000, 0, 10000)
        sizer_4.Add(self.slider_1, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)

        label_5 = wx.StaticText(self, wx.ID_ANY, "-180.0")
        sizer_5.Add(label_5, 1, wx.ALL, 3)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "1.0", style=wx.TE_PROCESS_ENTER)
        sizer_5.Add(self.text_ctrl_1, 0, 0, 0)

        label_6 = wx.StaticText(self, wx.ID_ANY, "180.0", style=wx.ALIGN_RIGHT)
        sizer_5.Add(label_6, 1, wx.ALL, 3)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.panel_1.SetSizer(grid_sizer_1)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_COMBOBOX, self.OnConfigSelect, self.combo_box_2)
        self.Bind(wx.EVT_COMBOBOX, self.OnConfigSelect, self.combo_box_3)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.OnScroll, self.slider_1)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnSliderEnter, self.text_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_OK)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_CANCEL)
        # end wxGlade

    def OnConfigSelect(self, event):  # wxGlade: MyTwistDialog.<event_handler>
        print("Event handler 'OnConfigSelect' not implemented!")
        event.Skip()

    def OnScroll(self, event):  # wxGlade: MyTwistDialog.<event_handler>
        print("Event handler 'OnScroll' not implemented!")
        event.Skip()

    def OnSliderEnter(self, event):  # wxGlade: MyTwistDialog.<event_handler>
        print("Event handler 'OnSliderEnter' not implemented!")
        event.Skip()

    def OnOK(self, event):  # wxGlade: MyTwistDialog.<event_handler>
        print("Event handler 'OnOK' not implemented!")
        event.Skip()

    def OnCancel(self, event):  # wxGlade: MyTwistDialog.<event_handler>
        print("Event handler 'OnCancel' not implemented!")
        event.Skip()

# end of class MyTwistDialog

class MyRotateDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyRotateDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Rotate")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_RAISED)
        sizer_1.Add(self.panel_1, 1, wx.ALL | wx.EXPAND, 5)

        grid_sizer_1 = wx.FlexGridSizer(4, 2, 3, 3)

        label_4 = wx.StaticText(self.panel_1, wx.ID_ANY, "Rotate Config")
        grid_sizer_1.Add(label_4, 1, wx.ALL, 3)

        grid_sizer_1.Add((0, 0), 0, 0, 0)

        label_3 = wx.StaticText(self.panel_1, wx.ID_ANY, "Atom 1", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_3, 1, wx.ALL, 5)

        self.combo_box_2 = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Rotate Group", "Translate Group", "Rotate Atom", "Fixed"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_2.SetSelection(0)
        grid_sizer_1.Add(self.combo_box_2, 0, wx.ALL, 5)

        label_2 = wx.StaticText(self.panel_1, wx.ID_ANY, "Atom 2", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_2, 1, wx.ALL, 5)

        self.combo_box_3 = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Translate Group", "Translate Atom", "Fixed"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_3.SetSelection(0)
        grid_sizer_1.Add(self.combo_box_3, 0, wx.ALL, 5)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "Atom 3")
        grid_sizer_1.Add(label_1, 1, wx.ALL, 5)

        self.combo_box_4 = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["Rotate Group", "Translate Group", "Rotate Atom", "Fixed"], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.combo_box_4.SetSelection(0)
        grid_sizer_1.Add(self.combo_box_4, 0, wx.ALL, 5)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 3)

        self.slider_1 = wx.Slider(self, wx.ID_ANY, 1000, 0, 10000)
        sizer_4.Add(self.slider_1, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)

        label_5 = wx.StaticText(self, wx.ID_ANY, "0.0")
        sizer_5.Add(label_5, 1, wx.ALL, 3)

        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "1.0", style=wx.TE_PROCESS_ENTER)
        sizer_5.Add(self.text_ctrl_1, 0, 0, 0)

        label_6 = wx.StaticText(self, wx.ID_ANY, "180.0", style=wx.ALIGN_RIGHT)
        sizer_5.Add(label_6, 1, wx.ALL, 3)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.panel_1.SetSizer(grid_sizer_1)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_COMBOBOX, self.OnConfigSelect, self.combo_box_2)
        self.Bind(wx.EVT_COMBOBOX, self.OnConfigSelect, self.combo_box_3)
        self.Bind(wx.EVT_COMBOBOX, self.OnConfigSelect, self.combo_box_4)
        self.Bind(wx.EVT_COMMAND_SCROLL, self.OnScroll, self.slider_1)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnSliderEnter, self.text_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.OnOK, self.button_OK)
        self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_CANCEL)
        # end wxGlade

    def OnConfigSelect(self, event):  # wxGlade: MyRotateDialog.<event_handler>
        print("Event handler 'OnConfigSelect' not implemented!")
        event.Skip()

    def OnScroll(self, event):  # wxGlade: MyRotateDialog.<event_handler>
        print("Event handler 'OnScroll' not implemented!")
        event.Skip()

    def OnSliderEnter(self, event):  # wxGlade: MyRotateDialog.<event_handler>
        print("Event handler 'OnSliderEnter' not implemented!")
        event.Skip()

    def OnOK(self, event):  # wxGlade: MyRotateDialog.<event_handler>
        print("Event handler 'OnOK' not implemented!")
        event.Skip()

    def OnCancel(self, event):  # wxGlade: MyRotateDialog.<event_handler>
        print("Event handler 'OnCancel' not implemented!")
        event.Skip()

# end of class MyRotateDialog

class MyApp(wx.App):
    def OnInit(self):
        self.main = MyMainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.main)
        self.main.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    sdm = MyApp(0)
    sdm.MainLoop()
